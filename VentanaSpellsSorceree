setDefaultTab("Main")

g_ui.loadUIFromString([[
menPanel < Panel
  margin: 2
  margin-bottom: 17
  layout:
    type: verticalBox

ConfigWindowSorcerer < MainWindow
  !text: tr('- MASTER SORCERER -')
  font: terminus-10px
  color: red
  size: 230 250
  @onEscape: self:hide()

  TabBar
    id: spellsTabBar
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 2

  Panel
    id: spellsImagem
    anchors.top: spellsTabBar.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    image-border: 2

  Button
    id: closeButton
    !text: tr('Cerrar')
    font: cipsoftFont
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 49 21
    margin-top: 1
    margin-right: -5
    margin-bottom: -5
]])

local panelName = "configSorcerer"
if not storage[panelName] then
  storage[panelName] = {
    enabled = false,
  }
end

local config = storage[panelName]

rootWidget = g_ui.getRootWidget()
if rootWidget then
  configWindowSorcerer = UI.createWindow('ConfigWindowSorcerer', rootWidget)
  configWindowSorcerer:hide()
  local TabBarSpells = configWindowSorcerer.spellsTabBar
  TabBarSpells:setContentWidget(configWindowSorcerer.spellsImagem)

  -- Panel para macros Normales
  local normalPanel = g_ui.createWidget("menPanel")
  normalPanel:setId("panelNormal")
  TabBarSpells:addTab("PVP", normalPanel)

  -- Panel para macros No PK
  local noPkPanel = g_ui.createWidget("menPanel")
  noPkPanel:setId("panelNoPK")
  TabBarSpells:addTab("No PVP", noPkPanel)

  -- Panel para macros Wheel
  local wheelPanel = g_ui.createWidget("menPanel")
  wheelPanel:setId("panelWheel")
  TabBarSpells:addTab("Wheel", wheelPanel)

  -- Panel para macros Más
  local masPanel = g_ui.createWidget("menPanel")
  masPanel:setId("panelMas")
  TabBarSpells:addTab(" + ", masPanel)

  UI.Separator(normalPanel)
  UI.Separator(noPkPanel)
  UI.Separator(wheelPanel)
  UI.Separator(masPanel)

  local listaMacrosNormal = {}
  local listaMacrosNoPK = {}
  local listaMacrosWheel = {}
  local listaMacrosMas = {}


local exevoGranMasFlam = macro(3000, "Exevo Gran Mas Flam", function()
    if g_game.isAttacking() then
        say("exevo gran mas flam")
    end
end)

local exevoGranMasVis = macro(2500, "Exevo Gran Mas Vis", function()
    if g_game.isAttacking() then
        say("exevo gran mas vis")
        say("exevo gran mas vis")
        say("exevo gran mas vis")
    end
end)

local exoriFlamhur = macro(2000, "Exevo Gran Flam Hur", function()
    if g_game.isAttacking() then
        say("exevo gran flam hur")
    end
end)

local exevoVishur = macro(1800, "Exevo Vis Hur", function()
    if g_game.isAttacking() then
        say("exevo vis hur")
    end
end)

local exoriFlam = macro(1300, "Exori Flam", function()
    if g_game.isAttacking() then
        say("exori flam")
    end
end)

local exoriVis = macro(1300, "Exori Vis", function()
    if g_game.isAttacking() then
        say("exori vis")
    end
end)

local exoriMort = macro(1300, "Exori Mort", function()
    if g_game.isAttacking() then
        say("exori mort")
    end
end)

local exoriMoe = macro(4000, "Exori Moe", function()
    if g_game.isAttacking() then
        say("exori Moe")
    end
end)

-- Agregando los macros a la lista
table.insert(listaMacrosNormal, exevoGranMasFlam)
table.insert(listaMacrosNormal, exevoGranMasVis)
table.insert(listaMacrosNormal, exoriFlamhur)
table.insert(listaMacrosNormal, exevoVishur)
table.insert(listaMacrosNormal, exoriFlam)
table.insert(listaMacrosNormal, exoriVis)
table.insert(listaMacrosNormal, exoriMort)
table.insert(listaMacrosNormal, exoriMoe)


--aquipone el macro y registrar

  -- Macro para No-PK
  local distance = 7  -- Distancia para detectar jugadores cercanos

  local MasflamNoPK = macro(3000, "Exevo gran mas flam (No-PK)", function()
    local playerInScreen = false
    if not g_game.isAttacking() then
        return
    end
    for i, mob in ipairs(getSpectators()) do
        if (getDistanceBetween(player:getPosition(), mob:getPosition()) <= distance and mob:isPlayer()) and (player:getName() ~= mob:getName()) then
            playerInScreen = true
        end
    end
    if not playerInScreen then
        say("exevo gran mas flam")
    end
  end)


  local distance = 8  -- Distancia para detectar jugadores cercanos

  local MasvisNoPK = macro(2500, "Exevo gran mas vis (No-PK)", function()
    local playerInScreen = false
    if not g_game.isAttacking() then
        return
    end
    for i, mob in ipairs(getSpectators()) do
        if (getDistanceBetween(player:getPosition(), mob:getPosition()) <= distance and mob:isPlayer()) and (player:getName() ~= mob:getName()) then
            playerInScreen = true
        end
    end
    if not playerInScreen then
        say("exevo gran mas vis")
    end
  end)


table.insert(listaMacrosNoPK, MasflamNoPK)
table.insert(listaMacrosNoPK, MasvisNoPK)




--table.insert(listaMacrosNoPK, exevoGranMasFrigoNoPK)

--aquipone el macro y registrar

--table.insert(listaMacrosWheel, wheelAttack)

  local DELAY = 1500 -- intervalo de

  -- Definición de los macros para el panel Más
  local spells = {"exori moe", "useRuna", "exevo gran flam hur", "exevo vis hur", "exevo gran flam hur", "useRuna", "exevo gran mas vis"}

  local function useSorcererCombo()
      for i = 1, #spells do
          schedule(DELAY * (i-1), function()
              if spells[i] == "useRuna" then
                  usewith(3161, g_game.getAttackingCreature()) -- ID de la runa y uso en el target
              else
                  say(spells[i]) -- dice el hechizo
              end
          end)
      end
      delay(#spells * DELAY)
  end

  macro(100, "Rotacion [Hunt]", function()
      if not g_game.isAttacking() then 
          return 
      end
      useSorcererCombo()
  end, masPanel)

  -- Combo de hechizos para bosses
  local spellsBoss = {"exevo gran vis lux", "useRuna", "exevo gran flam hur", "exevo vis hur", "useRuna", "exevo gran flam hur", "exevo gran vis lux", "useRuna", "exevo vis hur", "exevo gran mas vis"}

  local function useBossCombo()
      for i = 1, #spellsBoss do
          schedule(DELAY * (i-1), function()
              if spellsBoss[i] == "useRuna" then
                  usewith(3155, g_game.getAttackingCreature()) -- ID de la runa y uso en el target
              else
                  say(spellsBoss[i]) -- dice el hechizo
              end
          end)
      end
      delay(#spellsBoss * DELAY)
  end

  macro(100, "Rotacion [Boss]", function()
      if not g_game.isAttacking() then 
          return 
      end
      useBossCombo()
  end, masPanel)


macro(100, "Exevo Vis Lux (target)", function()
  local spell = "exevo vis lux"
  local max_distance = 5

  local exhausted = 2000

  local enemy = target()
  if not enemy then return true end
  local pos = player:getPosition()
  local cpos = enemy:getPosition()
  if getDistanceBetween(pos, cpos) > max_distance then return true end
  local diffx = cpos.x - pos.x
  local diffy = cpos.y - pos.y
  if diffx > 0 and diffy == 0 then turn(1) cast(spell) delay(exhausted)
  elseif diffx < 0 and diffy == 0 then turn(3) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy > 0 then turn(2) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy < 0 then turn(0) cast(spell) delay(exhausted)
  end
end, masPanel)


macro(100, "Exevo Vis Hur (target)", function()
  local spell = "exevo vis hur"
  local max_distance = 5

  local exhausted = 2000

  local enemy = target()
  if not enemy then return true end
  local pos = player:getPosition()
  local cpos = enemy:getPosition()
  if getDistanceBetween(pos, cpos) > max_distance then return true end
  local diffx = cpos.x - pos.x
  local diffy = cpos.y - pos.y
  if diffx > 0 and diffy == 0 then turn(1) cast(spell) delay(exhausted)
  elseif diffx < 0 and diffy == 0 then turn(3) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy > 0 then turn(2) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy < 0 then turn(0) cast(spell) delay(exhausted)
  end
end, masPanel)


macro(100, "Exevo Flam Hur (target)", function()
  local spell = "exevo flam hur"
  local max_distance = 4

  local exhausted = 2000

  local enemy = target()
  if not enemy then return true end
  local pos = player:getPosition()
  local cpos = enemy:getPosition()
  if getDistanceBetween(pos, cpos) > max_distance then return true end
  local diffx = cpos.x - pos.x
  local diffy = cpos.y - pos.y
  if diffx > 0 and diffy == 0 then turn(1) cast(spell) delay(exhausted)
  elseif diffx < 0 and diffy == 0 then turn(3) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy > 0 then turn(2) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy < 0 then turn(0) cast(spell) delay(exhausted)
  end
end, masPanel)


macro(100, "Exevo Gran Flam Hur (target)", function()
  local spell = "exevo flam hur"
  local max_distance = 5

  local exhausted = 2000

  local enemy = target()
  if not enemy then return true end
  local pos = player:getPosition()
  local cpos = enemy:getPosition()
  if getDistanceBetween(pos, cpos) > max_distance then return true end
  local diffx = cpos.x - pos.x
  local diffy = cpos.y - pos.y
  if diffx > 0 and diffy == 0 then turn(1) cast(spell) delay(exhausted)
  elseif diffx < 0 and diffy == 0 then turn(3) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy > 0 then turn(2) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy < 0 then turn(0) cast(spell) delay(exhausted)
  end
end, masPanel)

macro(100, "Exevo Gran Vis Lux (target)", function()
  local spell = "exevo gran vis lux"
  local max_distance = 7
  local exhausted = 2000

  local enemy = target()
  if not enemy then return true end
  local pos = player:getPosition()
  local cpos = enemy:getPosition()
  if getDistanceBetween(pos, cpos) > max_distance then return true end
  local diffx = cpos.x - pos.x
  local diffy = cpos.y - pos.y
  if diffx > 0 and diffy == 0 then turn(1) cast(spell) delay(exhausted)
  elseif diffx < 0 and diffy == 0 then turn(3) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy > 0 then turn(2) cast(spell) delay(exhausted)
  elseif diffx == 0 and diffy < 0 then turn(0) cast(spell) delay(exhausted)
  end
end, masPanel)






  local checkboxesNormal = {}
  local checkboxesNoPK = {}
  local checkboxesWheel = {}
  local checkboxesMas = {}

  -- Agregar checkboxes para el panel Normal
  for _, mac in ipairs(listaMacrosNormal) do
      local checkbox = g_ui.createWidget("CheckBox", normalPanel)
      checkbox:setText(mac.switch:getText())
      checkbox.onCheckChange = function(wid, isChecked)
          mac.setOn(isChecked and config.enabled)
      end
      checkbox:setChecked(mac.isOn())
      mac.switch:setVisible(false)
      table.insert(checkboxesNormal, checkbox)
  end

  -- Agregar checkboxes para el panel No PK
  for _, mac in ipairs(listaMacrosNoPK) do
      local checkbox = g_ui.createWidget("CheckBox", noPkPanel)
      checkbox:setText(mac.switch:getText())
      checkbox.onCheckChange = function(wid, isChecked)
          mac.setOn(isChecked and config.enabled)
      end
      checkbox:setChecked(mac.isOn())
      mac.switch:setVisible(false)
      table.insert(checkboxesNoPK, checkbox)
  end

  -- Agregar checkboxes para el panel Wheel
  for _, mac in ipairs(listaMacrosWheel) do
      local checkbox = g_ui.createWidget("CheckBox", wheelPanel)
      checkbox:setText(mac.switch:getText())
      checkbox.onCheckChange = function(wid, isChecked)
          mac.setOn(isChecked and config.enabled)
      end
      checkbox:setChecked(mac.isOn())
      mac.switch:setVisible(false)
      table.insert(checkboxesWheel, checkbox)
  end

  -- Agregar checkboxes para el panel Más
  for _, mac in ipairs(listaMacrosMas) do
      local checkbox = g_ui.createWidget("CheckBox", masPanel)
      checkbox:setText(mac.switch:getText())
      checkbox.onCheckChange = function(wid, isChecked)
          mac.setOn(isChecked and config.enabled)
      end
      checkbox:setChecked(mac.isOn())
      mac.switch:setVisible(false)
      table.insert(checkboxesMas, checkbox)
  end

  configWindowSorcerer.closeButton.onClick = function(widget)
      configWindowSorcerer:hide()
  end

  -- Switch para habilitar/deshabilitar los macros
  UI.SwitchAndButton({on = config.enabled, left = "Sorcerer Spells", right = "Menu"}, function(widget)
      config.enabled = not config.enabled
      for i, mac in ipairs(listaMacrosNormal) do
          mac.setOn(config.enabled and checkboxesNormal[i]:isChecked())
      end
      for i, mac in ipairs(listaMacrosNoPK) do
          mac.setOn(config.enabled and checkboxesNoPK[i]:isChecked())
      end
      for i, mac in ipairs(listaMacrosWheel) do
          mac.setOn(config.enabled and checkboxesWheel[i]:isChecked())
      end
      for i, mac in ipairs(listaMacrosMas) do
          mac.setOn(config.enabled and checkboxesMas[i]:isChecked())
      end
  end, function()
      configWindowSorcerer:show()
      configWindowSorcerer:raise()
      configWindowSorcerer:focus()
  end)
end

